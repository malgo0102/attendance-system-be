openapi: 3.0.0
info:
  title: Attendance-System API
  description: Node.js + Postgresql - API documentation
  version: 1.0.0
tags:
  - name: user
    description: Manage users
  - name: class
    description: Manage classes
servers:
  - url: 'http://localhost:3005'
    description: Local development server
# schemes:
# - http
paths:
  /user/me:
    get:
      tags:
      - user
      summary: Retrieves user token
      consumes:
      - application/json
      - application/xml
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: Pet object that needs to be added to the store
        required: true
        schema:
          $ref: '#/definitions/Pet'
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Pet not found
        405:
          description: Validation exception
      security:
      - petstore_auth:
        - write:pets
        - read:pets
  /user:
    post:
      tags:
      - user
      summary: Create a new user
      operationId: createUser
      consumes:
      - application/json
      - application/xml
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: User object that needs to be added to the database
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        405:
          description: Invalid input
      security:
      - petstore_auth:
        - write:pets
        - read:pets
    get:
      tags:
      - user
      summary: Get all users
      operationId: getAllUsers
      consumes:
      - application/json
      - application/xml
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: Pet object that needs to be added to the store
        required: true
        schema:
          $ref: '#/definitions/Pet'
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Pet not found
        405:
          description: Validation exception
      security:
      - petstore_auth:
        - write:pets
        - read:pets
  /user/{userId}:
    get:
      tags:
      - user
      summary: Get user by Id
      description: Returns a single user
      operationId: getUserById
      produces:
      - application/json
      - application/xml
      parameters:
      - name: userId
        in: path
        description: ID of user to return
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        400:
          description: Invalid Id supplied
        404:
          description: User not found
      security:
      - api_key: []
    put:
      tags:
      - user
      summary: Updates a user
      operationId: updateUser
      consumes:
      - application/x-www-form-urlencoded
      produces:
      - application/json
      - application/xml
      parameters:
      - name: petId
        in: path
        description: Id of uder that needs to be updated
        required: true
        type: integer
        format: int64
      - name: name
        in: formData
        description: Updated name of the pet
        required: false
        type: string
      - name: status
        in: formData
        description: Updated status of the pet
        required: false
        type: string
      responses:
        405:
          description: Invalid input
      security:
      - petstore_auth:
        - write:pets
        - read:pets
    delete:
      tags:
      - user
      summary: Deletes a user
      operationId: deleteUser
      produces:
      - application/json
      - application/xml
      parameters:
      - name: api_key
        in: header
        required: false
        type: string
      - name: petId
        in: path
        description: User id to delete
        required: true
        type: integer
        format: int64
      responses:
        400:
          description: Invalid Id supplied
        404:
          description: User not found
      security:
      - petstore_auth:
        - write:pets
        - read:pets
  /class:
    post:
      tags:
      - class
      summary: Create a new class
      operationId: createClass
      consumes:
      - application/json
      - application/xml
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: Class object that needs to be added to the database
        required: true
        schema:
          $ref: '#/definitions/Class'
      responses:
        405:
          description: Invalid input
      security:
      - petstore_auth:
        - write:pets
        - read:pets
    get:
      tags:
      - class
      summary: Get all classes
      operationId: getAllClasses
      consumes:
      - application/json
      - application/xml
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: Class object that needs to be added to the database
        required: true
        schema:
          $ref: '#/definitions/Pet'
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Class not found
        405:
          description: Validation exception
      security:
      - petstore_auth:
        - write:pets
        - read:pets
  /class/{id}:
    get:
      tags:
      - class
      summary: Get class by Id
      description: Returns a single user
      operationId: getUserById
      produces:
      - application/json
      - application/xml
      parameters:
      - name: userId
        in: path
        description: ID of class to return
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        400:
          description: Invalid Id supplied
        404:
          description: User not found
      security:
      - api_key: []
    put:
      tags:
      - class
      summary: Updates a class
      operationId: updateUser
      consumes:
      - application/x-www-form-urlencoded
      produces:
      - application/json
      - application/xml
      parameters:
      - name: petId
        in: path
        description: Id of class that needs to be updated
        required: true
        type: integer
        format: int64
      - name: name
        in: formData
        description: Updated name of the class
        required: false
        type: string
      - name: status
        in: formData
        description: Updated s
        required: false
        type: string
      responses:
        405:
          description: Invalid input
      security:
      - petstore_auth:
        - write:pets
        - read:pets
    delete:
      tags:
      - class
      summary: Deletes a class
      operationId: deleteUser
      produces:
      - application/json
      - application/xml
      parameters:
      - name: api_key
        in: header
        required: false
        type: string
      - name: classId
        in: path
        description: Class id to delete
        required: true
        type: integer
        format: int64
      responses:
        400:
          description: Invalid Id supplied
        404:
          description: Class not found
      security:
      - petstore_auth:
        - write:pets
        - read:pets
 

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    user:
      type: object
      properties:
        ID:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
    class:
      type: object
      properties:
        ID:
          type: integer
        title:
          type: string
        description:
          type: integer
     
   
  responses:
    UnauthorizedError:
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Unauthorized
    NotFoundError:
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Not Found